---
import Layout from '../../layouts/Layout.astro';
import { LeagueSeasonSessions } from '../../schemas/league-season-sessions';
import { DateTime } from 'luxon';
import { getTrackMapUrl, getTrackDetails } from '../../utils/tracks';
import type { Subsession } from '../../schemas/subsession';

export async function getStaticPaths() {
  const { sessions } = await LeagueSeasonSessions.parse(
    await import('../../data/league-season-sessions.json')
  );
  return sessions
    .filter(session => {
      const date = DateTime.fromISO(session.launch_at).setZone('Europe/London');
      return (
        date < DateTime.now() &&
        date.weekday === 4 && // Thursday
        date.hour === 19 && // 19:00
        date.minute === 0
      );
    })
    .map(session => ({
      params: { subsessionId: session.subsession_id?.toString() ?? '' },
      props: {
        session,
        results: import.meta
          .glob<{ default: Subsession }>('/src/data/subsessions/*.json')
          [`/src/data/subsessions/${session.subsession_id}.json`](),
      },
    }));
}

const { session, results } = Astro.props;
const raceResults = await results;

function formatTime(time: number) {
  if (!time || time <= 0) return 'No time';
  return (time / 10000).toFixed(3) + 's';
}

// Type guard for session results
function isRaceSession(session: { simsession_type: number }): boolean {
  return session.simsession_type === 6;
}
---

<Layout title={`Race Results - ${session.track.track_name}`}>
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-2">{session.track.track_name}</h1>
    <p class="text-gray-400 mb-8">
      {DateTime.fromISO(session.launch_at).toFormat('DDDD')}
    </p>

    <div class="bg-gray-800 rounded-lg p-6">
      <div class="border-b border-gray-700 mb-6">
        <div class="flex flex-wrap gap-2 -mb-px">
          {
            [...raceResults.session_results]
              .filter(r => !['WARMUP', 'PRACTICE'].includes(r.simsession_name))
              .reverse()
              .map((session, index) => (
                <button
                  class:list={[
                    'px-3 py-1.5 border-b-2 transition-colors text-sm sm:text-base sm:px-4 sm:py-2',
                    index === 0
                      ? 'border-blue-500 text-white'
                      : 'border-transparent text-gray-400 hover:text-white',
                  ]}
                  data-tab={index}
                >
                  {session.simsession_name}
                </button>
              ))
          }
        </div>
      </div>

      {
        [...raceResults.session_results]
          .filter(r => !['WARMUP', 'PRACTICE'].includes(r.simsession_name))
          .reverse()
          .map((session, sessionIndex) => (
            <div
              class="tab-content"
              data-tab={sessionIndex}
              style={sessionIndex === 0 ? '' : 'display: none;'}
            >
              <table class="w-full">
                <thead>
                  <tr class="text-left border-b border-gray-700">
                    <th class="pb-2">Pos</th>
                    <th class="pb-2">Driver</th>
                    <th class="pb-2 text-right">
                      {isRaceSession(session) ? 'Gap' : 'Qualifying Time'}
                    </th>
                    {isRaceSession(session) && (
                      <th class="pb-2 text-right">Best Lap</th>
                    )}
                  </tr>
                </thead>
                <tbody>
                  {session.results
                    .sort((a, b) => {
                      if (isRaceSession(session)) {
                        return (
                          (a.finish_position ?? 0) - (b.finish_position ?? 0)
                        );
                      }
                      // For qualifying sessions
                      const aTime = a.best_lap_time || Infinity;
                      const bTime = b.best_lap_time || Infinity;
                      if (aTime === Infinity && bTime === Infinity) {
                        return 0;
                      }
                      return aTime - bTime;
                    })
                    .map((result, index) => (
                      <tr class="border-b border-gray-700/50 text-gray-400">
                        <td class="py-2">{index + 1}</td>
                        <td class="py-2">{result.display_name}</td>
                        <td class="py-2 text-right">
                          {isRaceSession(session)
                            ? index === 0
                              ? 'Winner'
                              : result.interval && result.interval > 0
                                ? `+${formatTime(result.interval)}`
                                : 'DNF'
                            : formatTime(result.best_lap_time ?? 0)}
                        </td>
                        {isRaceSession(session) && (
                          <td class="py-2 text-right">
                            {formatTime(result.best_lap_time ?? 0)}
                          </td>
                        )}
                      </tr>
                    ))}
                </tbody>
              </table>
            </div>
          ))
      }
    </div>

    <a href="/wtec" class="inline-block mt-8 text-gray-400 hover:text-white">
      ‚Üê Back to Race Schedule
    </a>
  </main>
</Layout>

<script>
  const tabs = document.querySelectorAll<HTMLElement>('[data-tab]');
  const contents = document.querySelectorAll<HTMLElement>('.tab-content');

  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const tabIndex = tab.getAttribute('data-tab');

      // Update tab styles
      tabs.forEach(t => {
        t.classList.remove('border-blue-500', 'text-white');
        t.classList.add('border-transparent', 'text-gray-400');
      });
      tab.classList.remove('border-transparent', 'text-gray-400');
      tab.classList.add('border-blue-500', 'text-white');

      // Show selected content
      contents.forEach(content => {
        if (content instanceof HTMLElement) {
          content.style.display =
            content.getAttribute('data-tab') === tabIndex ? '' : 'none';
        }
      });
    });
  });
</script>

<style>
  main {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .back-link {
    display: inline-block;
    margin-top: 2rem;
    color: inherit;
    text-decoration: none;
  }

  .back-link:hover {
    text-decoration: underline;
  }
</style>
