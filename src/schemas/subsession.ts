import { z } from 'zod';

// Helper schemas for nested objects
const HelmetSchema = z.object({
  pattern: z.number(),
  color1: z.string(),
  color2: z.string(),
  color3: z.string(),
  face_type: z.number(),
  helmet_type: z.number(),
});

const LiverySchema = z.object({
  car_id: z.number(),
  pattern: z.number(),
  color1: z.string(),
  color2: z.string(),
  color3: z.string(),
  number_font: z.number(),
  number_color1: z.string(),
  number_color2: z.string(),
  number_color3: z.string(),
  number_slant: z.number(),
  sponsor1: z.number(),
  sponsor2: z.number(),
  car_number: z.string(),
  wheel_color: z.string().nullable(),
  rim_type: z.number(),
});

const SuitSchema = z.object({
  pattern: z.number(),
  color1: z.string(),
  color2: z.string(),
  color3: z.string(),
});

const ResultSchema = z.object({
  cust_id: z.number(),
  display_name: z.string(),
  aggregate_champ_points: z.number(),
  ai: z.boolean(),
  average_lap: z.number(),
  best_lap_num: z.number(),
  best_lap_time: z.number(),
  best_nlaps_num: z.number(),
  best_nlaps_time: z.number(),
  best_qual_lap_at: z.string(),
  best_qual_lap_num: z.number(),
  best_qual_lap_time: z.number(),
  car_class_id: z.number(),
  car_class_name: z.string(),
  car_class_short_name: z.string(),
  car_id: z.number(),
  car_name: z.string(),
  champ_points: z.number(),
  class_interval: z.number(),
  club_id: z.number(),
  club_name: z.string(),
  club_points: z.number(),
  club_shortname: z.string(),
  country_code: z.string(),
  division: z.number(),
  drop_race: z.boolean(),
  finish_position: z.number(),
  finish_position_in_class: z.number(),
  friend: z.boolean(),
  helmet: HelmetSchema,
  incidents: z.number(),
  interval: z.number(),
  laps_complete: z.number(),
  laps_lead: z.number(),
  league_agg_points: z.number(),
  league_points: z.number(),
  license_change_oval: z.number(),
  license_change_road: z.number(),
  livery: LiverySchema,
  max_pct_fuel_fill: z.number(),
  multiplier: z.number(),
  new_cpi: z.number(),
  new_license_level: z.number(),
  new_sub_level: z.number(),
  new_ttrating: z.number(),
  newi_rating: z.number(),
  old_cpi: z.number(),
  old_license_level: z.number(),
  old_sub_level: z.number(),
  old_ttrating: z.number(),
  oldi_rating: z.number(),
  opt_laps_complete: z.number(),
  position: z.number(),
  qual_lap_time: z.number(),
  reason_out: z.string(),
  reason_out_id: z.number(),
  starting_position: z.number(),
  starting_position_in_class: z.number(),
  suit: SuitSchema,
  watched: z.boolean(),
  weight_penalty_kg: z.number(),
});

const SessionResultSchema = z.object({
  simsession_number: z.number(),
  simsession_name: z.string(),
  simsession_type: z.number(),
  simsession_type_name: z.string(),
  simsession_subtype: z.number(),
  results: z.array(ResultSchema),
});

export const Subsession = z.object({
  subsession_id: z.number(),
  associated_subsession_ids: z.array(z.number()),
  can_protest: z.boolean(),
  car_classes: z.array(z.object({
    car_class_id: z.number(),
    short_name: z.string(),
    name: z.string(),
    strength_of_field: z.number(),
    num_entries: z.number(),
    cars_in_class: z.array(z.object({
      car_id: z.number(),
    })),
  })),
  caution_type: z.number(),
  cooldown_minutes: z.number(),
  corners_per_lap: z.number(),
  damage_model: z.number(),
  driver_change_param1: z.number(),
  driver_change_param2: z.number(),
  driver_change_rule: z.number(),
  driver_changes: z.boolean(),
  end_time: z.string(),
  event_average_lap: z.number(),
  event_best_lap_time: z.number(),
  event_laps_complete: z.number(),
  event_strength_of_field: z.number(),
  event_type: z.number(),
  event_type_name: z.string(),
  heat_info_id: z.number(),
  host_id: z.number(),
  league_id: z.number(),
  league_name: z.string(),
  league_season_id: z.number(),
  league_season_name: z.string(),
  license_category: z.string(),
  license_category_id: z.number(),
  limit_minutes: z.number(),
  max_team_drivers: z.number(),
  max_weeks: z.number(),
  min_team_drivers: z.number(),
  num_caution_laps: z.number(),
  num_cautions: z.number(),
  num_drivers: z.number(),
  num_laps_for_qual_average: z.number(),
  num_laps_for_solo_average: z.number(),
  num_lead_changes: z.number(),
  official_session: z.boolean(),
  points_type: z.string(),
  private_session_id: z.number(),
  race_summary: z.object({
    subsession_id: z.number(),
    average_lap: z.number(),
    laps_complete: z.number(),
    num_cautions: z.number(),
    num_caution_laps: z.number(),
    num_lead_changes: z.number(),
    field_strength: z.number(),
    heat_info_id: z.number(),
    num_opt_laps: z.number(),
    has_opt_path: z.boolean(),
    special_event_type: z.number(),
    special_event_type_text: z.string(),
  }).optional(),
  race_week_num: z.number(),
  restrict_results: z.boolean(),
  results_restricted: z.boolean(),
  season_id: z.number(),
  season_name: z.string(),
  season_quarter: z.number(),
  season_short_name: z.string(),
  season_year: z.number(),
  series_id: z.number(),
  series_name: z.string(),
  series_short_name: z.string(),
  session_id: z.number(),
  session_name: z.string(),
  session_results: z.array(SessionResultSchema),
  session_splits: z.array(z.object({
    subsession_id: z.number(),
    event_strength_of_field: z.number(),
  })),
  special_event_type: z.number(),
  start_time: z.string(),
  track: z.object({
    category: z.string(),
    category_id: z.number(),
    config_name: z.string(),
    track_id: z.number(),
    track_name: z.string(),
  }),
  track_state: z.object({
    leave_marbles: z.boolean(),
    practice_grip_compound: z.number().optional(),
    practice_rubber: z.number(),
    qualify_grip_compound: z.number().optional(),
    qualify_rubber: z.number(),
    race_grip_compound: z.number().optional(),
    race_rubber: z.number(),
    warmup_grip_compound: z.number().optional(),
    warmup_rubber: z.number(),
  }),
  weather: z.object({
    allow_fog: z.boolean(),
    fog: z.number(),
    precip_mm_final_session: z.number(),
    precip_mm2hr_before_final_session: z.number(),
    precip_option: z.number(),
    precip_time_pct: z.number(),
    rel_humidity: z.number(),
    simulated_start_time: z.string(),
    skies: z.number(),
    temp_units: z.number(),
    temp_value: z.number(),
    time_of_day: z.number(),
    track_water: z.number(),
    type: z.number(),
    version: z.number(),
    weather_var_initial: z.number(),
    weather_var_ongoing: z.number(),
    wind_dir: z.number(),
    wind_units: z.number(),
    wind_value: z.number(),
  }),
});